{"name":"Fauxflake","tagline":"Fauxflake is an easily embeddable decentralized, k-ordered unique ID generator.","body":"[![Build Status](https://travis-ci.org/rholder/fauxflake.png)](https://travis-ci.org/rholder/fauxflake)\r\n\r\n##What is this?\r\nFauxflake is an easily embeddable, decentralized, k-ordered unique ID generator.\r\nIt can use the same encoded ID format as Twitter's Snowflake or Boundary's\r\nFlake implementations as well as any other customized encoding without too much\r\neffort. The `fauxflake-core` module has no external dependencies and is meant to\r\nbe about as light as possible while still delivering useful functionality.\r\nEssentially, if you want to be able to generate a unique identifier across your\r\ninfrastructure with reasonable assurances about collisions, then you might find\r\nthis useful.\r\n\r\n##The Problem\r\nYou've run into one or more of the following scenarios:\r\n* You need to generate a unique identifier, perhaps for an RDBMS primary key or\r\nfor a NoSQL storage abstraction, and you need it done fast.\r\n* You need to be able to guarantee the loose orderings of unique keys when more\r\nthan one machine is generating them.\r\n* A centralized key generation service seems too heavy or is otherwise unacceptable.\r\n* You've thought about clock drift, server time running backwards, or\r\nany of a number of horrible things you read [here](http://infiniteundo.com/post/25509354022/more-falsehoods-programmers-believe-about-time-wisdom)\r\nthat make relying on simple system timestamps for anything absolutely\r\nhorrifying.\r\n\r\n##Where can I get it?\r\nYou can find this module in the Maven Central repository by using your favorite\r\nbuild tool:\r\n###Maven\r\n\r\n    <dependency>\r\n      <groupId>com.github.rholder</groupId>\r\n      <artifactId>fauxflake-core</artifactId>\r\n      <version>1.0.0</version>\r\n    </dependency>\r\n\r\n###Gradle\r\n\r\n    compile \"com.github.rholder:fauxflake-core:1.0.0\"\r\n\r\n##Quickstart\r\nLet's say you want to generate a lexicographically sortable, Twitter compatible\r\nidentifier, as a String. You could do that with the following snippet:\r\n```java\r\nIdGenerator snowflake = IdGenerators.newSnowflakeIdGenerator();\r\nString id = snowflake.generateId(1000).asString();\r\n```\r\n\r\nThe Snowflake and Flake `IdGenerator` instances are both thread-safe and\r\nintended to be used as singletons.\r\n\r\n##Customization\r\nThe `MachineIdProvider` is meant to be customized when the \"good enough\"\r\nguarantees coming from the `MacMachineIdProvider` and the\r\n`MacPidMachineIdProvider`aren't really good enough for your use case and you\r\nneed more strictness in how those are being set. For instance, by just swapping\r\nin your own unique machine identifier from a system property, you can get an\r\nactual universal guarantee among all of your machines if each are given a unique\r\nnumber on startup:\r\n\r\n```java\r\npublic class CustomMachineIdProvider implements MachineIdProvider {\r\n    @Override\r\n    public long getMachineId() {\r\n        return Long.valueOf(System.getProperty(\"my.app.machine.id\"));\r\n    }\r\n}\r\n```\r\n\r\nYou might want to note that a Snowflake ID only has 1024 possible unique machine\r\nidentifiers since the specification calls for reserving 10 bits for this\r\ninformation.\r\n\r\n##Building from source\r\nThe Fauxflake project uses a [Gradle](http://gradle.org)-based build system. In the instructions\r\nbelow, [`./gradlew`](http://vimeo.com/34436402) is invoked from the root of the source tree and serves as\r\na cross-platform, self-contained bootstrap mechanism for the build. The only\r\nprerequisites are [Git](https://help.github.com/articles/set-up-git) and JDK 1.6+.\r\n\r\n### check out sources\r\n`git clone git://github.com/rholder/fauxflake.git`\r\n\r\n### compile and test, build all jars\r\n`./gradlew build`\r\n\r\n### install all jars into your local Maven cache\r\n`./gradlew install`\r\n\r\n##License\r\nThe Fauxflake module is released under version 2.0 of the\r\n[Apache License](http://www.apache.org/licenses/LICENSE-2.0).\r\n\r\n##References\r\n* [https://github.com/twitter/snowflake/](https://github.com/twitter/snowflake/)\r\n* [https://blog.twitter.com/2010/announcing-snowflake](https://blog.twitter.com/2010/announcing-snowflake)\r\n* [https://github.com/boundary/flake](https://github.com/boundary/flake)\r\n* [http://boundary.com/blog/2012/01/12/flake-a-decentralized-k-ordered-unique-id-generator-in-erlang/](http://boundary.com/blog/2012/01/12/flake-a-decentralized-k-ordered-unique-id-generator-in-erlang/)\r\n* [http://infiniteundo.com/post/25509354022/more-falsehoods-programmers-believe-about-time-wisdom](http://infiniteundo.com/post/25509354022/more-falsehoods-programmers-believe-about-time-wisdom)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}